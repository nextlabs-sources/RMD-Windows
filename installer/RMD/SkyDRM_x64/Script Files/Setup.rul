////////////////////////////////////////////////////////////////////////////////
//                                                                            
//  This template script provides the code necessary to build an entry-point 
//  function to be called in an InstallScript custom action. 
//                                                                            
//                                                                            
//    File Name:  Setup.rul                                                   
//                                                                            
//  Description:  InstallShield script                                        
//
////////////////////////////////////////////////////////////////////////////////

// Include Ifx.h for built-in InstallScript function prototypes, for Windows 
// Installer API function prototypes and constants, and to declare code for 
// the OnBegin and OnEnd events.
#include "ifx.h"

// The keyword export identifies MyFunction() as an entry-point function.
// The argument it accepts must be a handle to the Installer database.
export prototype DeleteFiles(HWND);

export prototype UnregisterKey(HWND);

export prototype GetCurrentUserName(HWND);

export prototype LaunchSkyDRM(HWND);

// To Do:  Create a custom action for this entry-point function:
// 1.  Right-click on "Custom Actions" in the Sequences/Actions view.
// 2.  Select "Custom Action Wizard" from the context menu.
// 3.  Proceed through the wizard and give the custom action a unique name.
// 4.  Select "Run InstallScript code" for the custom action type, and in
//     the next panel select "MyFunction" (or the new name of the entry-
//     point function) for the source.
// 5.  Click Next, accepting the default selections until the wizard
//     creates the custom action.
//
// Once you have made a custom action, you must execute it in your setup by
// inserting it into a sequence or making it the result of a dialog's
// control event.

///////////////////////////////////////////////////////////////////////////////
//                                                                           
// Function:  MyFunction
//                                                                           
//  Purpose:  This function will be called by the script engine when
//            Windows(TM) Installer executes your custom action (see the "To
//            Do," above).
//                                                                           
///////////////////////////////////////////////////////////////////////////////
function DeleteFiles(hMSI)
    // To Do:  Declare local variables.
begin

    // To Do:  Write script that will be executed when MyFunction is called.
   // DeleteDir (LocalAppDataFolder^"\SkyDRM",ALLCONTENTS);   
	DeleteDir(INSTALLDIR^"\PDP",ALLCONTENTS); 
	DeleteDir(INSTALLDIR^"\SkyDRM",ALLCONTENTS); 
end;

function LaunchSkyDRM(hMSI)
    // To Do:  Declare local variables.
begin

    // To Do:  Write script that will be executed when MyFunction is called.
    LaunchApp (INSTALLDIR^"\\SkyDRM\\bin\\nxrmdapp.exe", "");
end;

///////////////////////////////////////////////////////////////////////////////
function UnregisterKey(hMSI)
    // To Do:  Declare local variables.
    STRING Key1;    
    STRING Key2;
begin

    // To Do:  Write script that will be executed when MyFunction is called.
      RegDBSetDefaultRoot (HKEY_CURRENT_USER); 
     
      Key1 = "Software\\Nextlabs"; 
      if(RegDBKeyExist(Key1)==1) then
	    if (RegDBDeleteKey (Key1) < 0) then 
        MessageBox ("Delete RegisterKey Failed!", SEVERE); 
        endif;
      endif;      
      
      Key2 = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run"; 
      if(RegDBKeyExist(Key1)==1) then
	    if (RegDBDeleteValue (Key2,"SkydrmLocal") < 0) then 
        MessageBox ("Delete RegisterKey Failed!", SEVERE); 
        endif;
      endif;
end;

#define ENV_USER "USERNAME" 

export prototype ExFn_GetEnvVar(HWND); 

function GetCurrentUserName(hMSI)
    STRING svEnvVar;
begin
	
    GetEnvVar (ENV_USER, svEnvVar); 
    MsiSetProperty(hMSI, "USERNAME", svEnvVar); 

end;



